name: 'Solana Prover Contract - build and test'
description: 'Builds and tests the solana prover contract program'

inputs:
  token:
    description: 'github token to update the git config and allow accessing private repos'
    required: true
  release:
    description: 'generates the release binaries (with anchor build --verifiable) for all envs'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Read Anchor version
      shell: bash
      run: |
        anchor_version="$( yq '.dependencies.anchor-lang.version' ./programs/polymer-prover/Cargo.toml )"
        echo "ANCHOR_VERSION=$anchor_version" >> $GITHUB_ENV

    - name: Configure Git credentials
      shell: bash
      run: |
        git config --global credential.helper 'cache --timeout=3600'
        git config --global url."https://x-access-token:${{ inputs.token }}@github.com/".insteadOf "https://github.com/"

    - name: Cache Yarn
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/yarn
          node_modules
        key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          yarn-${{ runner.os }}-

    - name: Cache Docker images
      # v0.5.0 is broken until they merge this fix https://github.com/ScribeMD/docker-cache/pull/835
      # use this fork in the meantime
      # uses: ScribeM/docker-cache@0.5.0
      uses: AndreKurait/docker-cache@0.6.0
      with:
        key: docker-${{ runner.os }}-${{ env.ANCHOR_VERSION }}

    - name: Install rust
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go/go.mod
        cache-dependency-path: go/go.sum
        cache: true

    #Â this is needed by cargo in the next step
    - name: Install hidapi dependencies
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y pkg-config build-essential libudev-dev

    - name: Run build & test
      shell: bash
      run: |
        . ./scripts/solana.sh
        . ./scripts/anchor.sh
        ./scripts/ci.sh

    # since it's a bit of a pain to set up the toolchain, let's try to reuse it to build the "release" artefacts
    - name: Build devnet release
      if: ${{ inputs.release != '' }}
      shell: bash
      run: ./scripts/build-release.sh
      env:
        PROGRAM_KEYPAIR: ${{ secrets.PROGRAM_KEYPAIR_DEVNET }}
        TYPE: dev

    - name: Build main release
      if: ${{ inputs.release != '' }}
      shell: bash
      run: ./scripts/build-release.sh
      env:
        PROGRAM_KEYPAIR: ${{ secrets.PROGRAM_KEYPAIR_MAIN }}
        TYPE: main
