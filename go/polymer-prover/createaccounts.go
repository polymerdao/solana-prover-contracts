// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package polymer_prover

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateAccounts is the `create_accounts` instruction.
type CreateAccountsInstruction struct {

	// [0] = [WRITE, SIGNER] authority
	//
	// [1] = [WRITE] cache_account
	// ··········· it this way because the proof is too large to be passed as an argument to the instruction
	// ··········· itself thanks to the transaction size limit.
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateAccountsInstructionBuilder creates a new `CreateAccountsInstruction` instruction builder.
func NewCreateAccountsInstructionBuilder() *CreateAccountsInstruction {
	nd := &CreateAccountsInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CreateAccountsInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *CreateAccountsInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CreateAccountsInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCacheAccount sets the "cache_account" account.
// it this way because the proof is too large to be passed as an argument to the instruction
// itself thanks to the transaction size limit.
func (inst *CreateAccountsInstruction) SetCacheAccount(cacheAccount ag_solanago.PublicKey) *CreateAccountsInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(cacheAccount).WRITE()
	return inst
}

func (inst *CreateAccountsInstruction) findFindCacheAddress(authority ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: cache
	seeds = append(seeds, []byte{byte(0x63), byte(0x61), byte(0x63), byte(0x68), byte(0x65)})
	// path: authority
	seeds = append(seeds, authority.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindCacheAddressWithBumpSeed calculates CacheAccount account address with given seeds and a known bump seed.
func (inst *CreateAccountsInstruction) FindCacheAddressWithBumpSeed(authority ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindCacheAddress(authority, bumpSeed)
	return
}

func (inst *CreateAccountsInstruction) MustFindCacheAddressWithBumpSeed(authority ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCacheAddress(authority, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindCacheAddress finds CacheAccount account address with given seeds.
func (inst *CreateAccountsInstruction) FindCacheAddress(authority ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindCacheAddress(authority, 0)
	return
}

func (inst *CreateAccountsInstruction) MustFindCacheAddress(authority ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCacheAddress(authority, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetCacheAccount gets the "cache_account" account.
// it this way because the proof is too large to be passed as an argument to the instruction
// itself thanks to the transaction size limit.
func (inst *CreateAccountsInstruction) GetCacheAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateAccountsInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateAccountsInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateAccountsInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst CreateAccountsInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateAccounts,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateAccountsInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateAccountsInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CacheAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateAccountsInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateAccounts")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        cache_", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj CreateAccountsInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateAccountsInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateAccountsInstruction declares a new CreateAccounts instruction with the provided parameters and accounts.
func NewCreateAccountsInstruction(
	// Accounts:
	authority ag_solanago.PublicKey,
	cacheAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateAccountsInstruction {
	return NewCreateAccountsInstructionBuilder().
		SetAuthorityAccount(authority).
		SetCacheAccount(cacheAccount).
		SetSystemProgramAccount(systemProgram)
}
