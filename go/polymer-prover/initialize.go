// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package polymer_prover

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type InitializeInstruction struct {
	ClientType     *string
	SignerAddr     *[20]uint8
	PeptideChainId *uint64

	// [0] = [WRITE] internal
	//
	// [1] = [WRITE, SIGNER] authority
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `InitializeInstruction` instruction builder.
func NewInitializeInstructionBuilder() *InitializeInstruction {
	nd := &InitializeInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetClientType sets the "client_type" parameter.
func (inst *InitializeInstruction) SetClientType(client_type string) *InitializeInstruction {
	inst.ClientType = &client_type
	return inst
}

// SetSignerAddr sets the "signer_addr" parameter.
func (inst *InitializeInstruction) SetSignerAddr(signer_addr [20]uint8) *InitializeInstruction {
	inst.SignerAddr = &signer_addr
	return inst
}

// SetPeptideChainId sets the "peptide_chain_id" parameter.
func (inst *InitializeInstruction) SetPeptideChainId(peptide_chain_id uint64) *InitializeInstruction {
	inst.PeptideChainId = &peptide_chain_id
	return inst
}

// SetInternalAccount sets the "internal" account.
func (inst *InitializeInstruction) SetInternalAccount(internal ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(internal).WRITE()
	return inst
}

func (inst *InitializeInstruction) findFindInternalAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: internal
	seeds = append(seeds, []byte{byte(0x69), byte(0x6e), byte(0x74), byte(0x65), byte(0x72), byte(0x6e), byte(0x61), byte(0x6c)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindInternalAddressWithBumpSeed calculates Internal account address with given seeds and a known bump seed.
func (inst *InitializeInstruction) FindInternalAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindInternalAddress(bumpSeed)
	return
}

func (inst *InitializeInstruction) MustFindInternalAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindInternalAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindInternalAddress finds Internal account address with given seeds.
func (inst *InitializeInstruction) FindInternalAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindInternalAddress(0)
	return
}

func (inst *InitializeInstruction) MustFindInternalAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindInternalAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetInternalAccount gets the "internal" account.
func (inst *InitializeInstruction) GetInternalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InitializeInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InitializeInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst InitializeInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ClientType == nil {
			return errors.New("ClientType parameter is not set")
		}
		if inst.SignerAddr == nil {
			return errors.New("SignerAddr parameter is not set")
		}
		if inst.PeptideChainId == nil {
			return errors.New("PeptideChainId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Internal is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      ClientType", *inst.ClientType))
						paramsBranch.Child(ag_format.Param("      SignerAddr", *inst.SignerAddr))
						paramsBranch.Child(ag_format.Param("  PeptideChainId", *inst.PeptideChainId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      internal", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj InitializeInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ClientType` param:
	err = encoder.Encode(obj.ClientType)
	if err != nil {
		return err
	}
	// Serialize `SignerAddr` param:
	err = encoder.Encode(obj.SignerAddr)
	if err != nil {
		return err
	}
	// Serialize `PeptideChainId` param:
	err = encoder.Encode(obj.PeptideChainId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ClientType`:
	err = decoder.Decode(&obj.ClientType)
	if err != nil {
		return err
	}
	// Deserialize `SignerAddr`:
	err = decoder.Decode(&obj.SignerAddr)
	if err != nil {
		return err
	}
	// Deserialize `PeptideChainId`:
	err = decoder.Decode(&obj.PeptideChainId)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	client_type string,
	signer_addr [20]uint8,
	peptide_chain_id uint64,
	// Accounts:
	internal ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeInstruction {
	return NewInitializeInstructionBuilder().
		SetClientType(client_type).
		SetSignerAddr(signer_addr).
		SetPeptideChainId(peptide_chain_id).
		SetInternalAccount(internal).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
