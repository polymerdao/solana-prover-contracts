// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package polymer_prover

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseAccounts is the `close_accounts` instruction.
type CloseAccountsInstruction struct {

	// [0] = [WRITE, SIGNER] authority
	//
	// [1] = [WRITE] cache_account
	//
	// [2] = [WRITE] result_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseAccountsInstructionBuilder creates a new `CloseAccountsInstruction` instruction builder.
func NewCloseAccountsInstructionBuilder() *CloseAccountsInstruction {
	nd := &CloseAccountsInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CloseAccountsInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *CloseAccountsInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CloseAccountsInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCacheAccount sets the "cache_account" account.
func (inst *CloseAccountsInstruction) SetCacheAccount(cacheAccount ag_solanago.PublicKey) *CloseAccountsInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(cacheAccount).WRITE()
	return inst
}

func (inst *CloseAccountsInstruction) findFindCacheAddress(authority ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: cache
	seeds = append(seeds, []byte{byte(0x63), byte(0x61), byte(0x63), byte(0x68), byte(0x65)})
	// path: authority
	seeds = append(seeds, authority.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindCacheAddressWithBumpSeed calculates CacheAccount account address with given seeds and a known bump seed.
func (inst *CloseAccountsInstruction) FindCacheAddressWithBumpSeed(authority ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindCacheAddress(authority, bumpSeed)
	return
}

func (inst *CloseAccountsInstruction) MustFindCacheAddressWithBumpSeed(authority ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCacheAddress(authority, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindCacheAddress finds CacheAccount account address with given seeds.
func (inst *CloseAccountsInstruction) FindCacheAddress(authority ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindCacheAddress(authority, 0)
	return
}

func (inst *CloseAccountsInstruction) MustFindCacheAddress(authority ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindCacheAddress(authority, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetCacheAccount gets the "cache_account" account.
func (inst *CloseAccountsInstruction) GetCacheAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetResultAccount sets the "result_account" account.
func (inst *CloseAccountsInstruction) SetResultAccount(resultAccount ag_solanago.PublicKey) *CloseAccountsInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(resultAccount).WRITE()
	return inst
}

func (inst *CloseAccountsInstruction) findFindResultAddress(authority ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: result
	seeds = append(seeds, []byte{byte(0x72), byte(0x65), byte(0x73), byte(0x75), byte(0x6c), byte(0x74)})
	// path: authority
	seeds = append(seeds, authority.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindResultAddressWithBumpSeed calculates ResultAccount account address with given seeds and a known bump seed.
func (inst *CloseAccountsInstruction) FindResultAddressWithBumpSeed(authority ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindResultAddress(authority, bumpSeed)
	return
}

func (inst *CloseAccountsInstruction) MustFindResultAddressWithBumpSeed(authority ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindResultAddress(authority, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindResultAddress finds ResultAccount account address with given seeds.
func (inst *CloseAccountsInstruction) FindResultAddress(authority ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindResultAddress(authority, 0)
	return
}

func (inst *CloseAccountsInstruction) MustFindResultAddress(authority ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindResultAddress(authority, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetResultAccount gets the "result_account" account.
func (inst *CloseAccountsInstruction) GetResultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst CloseAccountsInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseAccounts,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseAccountsInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseAccountsInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CacheAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ResultAccount is not set")
		}
	}
	return nil
}

func (inst *CloseAccountsInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseAccounts")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   cache_", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  result_", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj CloseAccountsInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CloseAccountsInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseAccountsInstruction declares a new CloseAccounts instruction with the provided parameters and accounts.
func NewCloseAccountsInstruction(
	// Accounts:
	authority ag_solanago.PublicKey,
	cacheAccount ag_solanago.PublicKey,
	resultAccount ag_solanago.PublicKey) *CloseAccountsInstruction {
	return NewCloseAccountsInstructionBuilder().
		SetAuthorityAccount(authority).
		SetCacheAccount(cacheAccount).
		SetResultAccount(resultAccount)
}
