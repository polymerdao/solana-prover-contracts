// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package polymer_prover

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type InternalAccountAccount struct {
	// store the owner's public key
	Authority ag_solanago.PublicKey

	// Client type used on peptide to generate the proof. It is part of the proof key
	ClientType string

	// Known signer address that signed the peptide state root
	SignerAddr     [20]uint8
	PeptideChainId uint64
}

var InternalAccountAccountDiscriminator = [8]byte{151, 149, 233, 78, 143, 12, 17, 254}

func (obj InternalAccountAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(InternalAccountAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `ClientType` param:
	err = encoder.Encode(obj.ClientType)
	if err != nil {
		return err
	}
	// Serialize `SignerAddr` param:
	err = encoder.Encode(obj.SignerAddr)
	if err != nil {
		return err
	}
	// Serialize `PeptideChainId` param:
	err = encoder.Encode(obj.PeptideChainId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InternalAccountAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(InternalAccountAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[151 149 233 78 143 12 17 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `ClientType`:
	err = decoder.Decode(&obj.ClientType)
	if err != nil {
		return err
	}
	// Deserialize `SignerAddr`:
	err = decoder.Decode(&obj.SignerAddr)
	if err != nil {
		return err
	}
	// Deserialize `PeptideChainId`:
	err = decoder.Decode(&obj.PeptideChainId)
	if err != nil {
		return err
	}
	return nil
}

type ProofCacheAccountAccount struct {
	Cache []byte
}

var ProofCacheAccountAccountDiscriminator = [8]byte{238, 17, 216, 242, 172, 224, 249, 126}

func (obj ProofCacheAccountAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ProofCacheAccountAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Cache` param:
	err = encoder.Encode(obj.Cache)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProofCacheAccountAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ProofCacheAccountAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[238 17 216 242 172 224 249 126]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Cache`:
	err = decoder.Decode(&obj.Cache)
	if err != nil {
		return err
	}
	return nil
}

type ValidationResultAccountAccount struct {
	// whether the proof is valid or not
	IsValid bool

	// error message if the proof is not valid
	ErrorMessage string

	// the chain ID of the event that was validated
	ChainId uint32

	// the emitting contract address that emitted the event
	EmittingContract [20]uint8
	Topics           []byte

	// the unindexed data of the event that was validated
	UnindexedData []byte
}

var ValidationResultAccountAccountDiscriminator = [8]byte{160, 149, 71, 76, 148, 48, 85, 229}

func (obj ValidationResultAccountAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ValidationResultAccountAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsValid` param:
	err = encoder.Encode(obj.IsValid)
	if err != nil {
		return err
	}
	// Serialize `ErrorMessage` param:
	err = encoder.Encode(obj.ErrorMessage)
	if err != nil {
		return err
	}
	// Serialize `ChainId` param:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return err
	}
	// Serialize `EmittingContract` param:
	err = encoder.Encode(obj.EmittingContract)
	if err != nil {
		return err
	}
	// Serialize `Topics` param:
	err = encoder.Encode(obj.Topics)
	if err != nil {
		return err
	}
	// Serialize `UnindexedData` param:
	err = encoder.Encode(obj.UnindexedData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ValidationResultAccountAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ValidationResultAccountAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[160 149 71 76 148 48 85 229]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsValid`:
	err = decoder.Decode(&obj.IsValid)
	if err != nil {
		return err
	}
	// Deserialize `ErrorMessage`:
	err = decoder.Decode(&obj.ErrorMessage)
	if err != nil {
		return err
	}
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return err
	}
	// Deserialize `EmittingContract`:
	err = decoder.Decode(&obj.EmittingContract)
	if err != nil {
		return err
	}
	// Deserialize `Topics`:
	err = decoder.Decode(&obj.Topics)
	if err != nil {
		return err
	}
	// Deserialize `UnindexedData`:
	err = decoder.Decode(&obj.UnindexedData)
	if err != nil {
		return err
	}
	return nil
}
