// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mars

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetData is the `set_data` instruction.
type SetData struct {
	Data *Data

	// [0] = [WRITE] data
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetDataInstructionBuilder creates a new `SetData` instruction builder.
func NewSetDataInstructionBuilder() *SetData {
	nd := &SetData{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *SetData) SetData(data Data) *SetData {
	inst.Data = &data
	return inst
}

// SetDataAccount sets the "data" account.
func (inst *SetData) SetDataAccount(data ag_solanago.PublicKey) *SetData {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(data).WRITE()
	return inst
}

// GetDataAccount gets the "data" account.
func (inst *SetData) GetDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst SetData) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetData,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetData) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetData) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Data is not set")
		}
	}
	return nil
}

func (inst *SetData) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetData")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("data", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj SetData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewSetDataInstruction declares a new SetData instruction with the provided parameters and accounts.
func NewSetDataInstruction(
	// Parameters:
	data Data,
	// Accounts:
	dataAccount ag_solanago.PublicKey) *SetData {
	return NewSetDataInstructionBuilder().
		SetData(data).
		SetDataAccount(dataAccount)
}
